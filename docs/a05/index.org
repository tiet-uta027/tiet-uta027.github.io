#+options: toc:nil
#+TITLE: Assignment 05 : Neural Regression (Iris Dataset)
#+SUBTITLE: UTA027 : Artificial Intelligence
#+AUTHOR: Raghav B. Venkataramaiyer
#+DATE: Mar '25
#+latex_header_extra: \usepackage{parskip}
#+latex_header_extra: \usepackage{svg}
#+latex_header_extra: \svgpath{{../../assets/icons/}}
#+latex_header_extra: \newcommand{\bvricon}[1]{\includesvg[width=10pt]{#1}}

#+md: [:material-file-pdf-box: Download this page as PDF](./index.pdf)

*Assignment 05: Multi-Layer Neural Network on the Iris
Dataset Using PyTorch* \\
(07-Apr to 18-Apr)

* COMMENT Auto Export to Md/Latex on save
#+begin_src emacs-lisp
  (cl-loop for hook in '(after-save-hook)
           do (add-hook hook
                        #'(lambda ()
                            (org-latex-export-to-pdf t)
                            (org-md-export-to-markdown)
                            (with-current-buffer (find-file-noselect (expand-file-name "index.md" default-directory))
                              (save-excursion
                                (goto-char (point-min))
                                (let* ((i 1)
                                       (boreg (pos-bol i))
                                       (eoreg (pos-eol i))
                                       _s)
                                  (while (not (eq boreg (point-max)))

                                    (setq _s (buffer-substring-no-properties boreg (+ 1 boreg)))
                                    (when (string= _s "#")
                                      (save-excursion (goto-char boreg)
                                                      (insert "#")))

                                    (setq i (+ i 1)
                                          boreg (pos-bol i)
                                          eoreg (pos-eol i)))))
                              (save-buffer)
                              (kill-buffer))
                            )
                        0 t))
#+end_src

#+RESULTS:

* Objective
The goal of this assignment is to implement a
multi-layer neural network (MLP) using PyTorch to
classify the Iris dataset.
* Question
Design and implement a multi-layer neural network using
PyTorch to classify the Iris dataset. Your
implementation should follow these steps:
** Dataset Preparation
+ Load the Iris dataset using
  sklearn.datasets.load_iris.
+ Convert the dataset into PyTorch tensors.
+ Split the dataset into training and test sets (e.g.,
  80% training, 20% testing).
+ Normalize the feature values.
** Build the Neural Network Model
+ Implement an MLP with PyTorch using
  =torch.nn.Module=.
+ The model should have:
  + An input layer with 4 neurons (one for each
    feature).
  + At least one hidden layer with ReLU activation.
  + An output layer with 3 neurons (one for each class)
    and softmax activation.
** Train the Model
+ Define the loss function (CrossEntropyLoss).
+ Choose an optimizer (e.g., Adam or SGD).
+ Train the model for a fixed number of epochs (e.g.,
  100 epochs).
+ Track the loss during training.
** Evaluate the Model
Compute accuracy on the test set.  Generate a confusion
matrix to visualize performance.
* Theory
+ [[https://docs.google.com/presentation/d/1Y0N7jhqgCFR6K1e48iIxqRxBkzKXEe27QUDyQ9_DGLc/edit?usp=sharing][Neuron and it application in Regression/
  Classification @@latex:For Latex@@@@html:For HTML@@]]
* Boilerplate Code
+ How to create a neural network module:
  [[https://gist.github.com/bvraghav/3e28f1f44eaf0dc74842b3e2395e86bd][@@html::simple-github:@@@@latex:\bvricon{simple/github}@@ +
  @@html::simple-googlecolab:@@@@latex:\bvricon{simple/googlecolab}@@
  Python Notebook@@latex: [Click here]@@.]]
+ How to create a pytorch dataset from tensors:
  [[https://gist.github.com/bvraghav/fdfeebb9c73f5d27aa98e74409adb38b][@@html::simple-github:@@@@latex:\bvricon{simple/github}@@ +
  @@html::simple-googlecolab:@@@@latex:\bvricon{simple/googlecolab}@@
  Python Notebook@@latex: [Click here]@@.]]
* Evaluation Criterion

This assignment shall be implemented by students and
evaluated by the instructor in lab.
